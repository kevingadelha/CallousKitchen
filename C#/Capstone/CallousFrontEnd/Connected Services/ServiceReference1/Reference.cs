//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBarcodeService")]
    public interface IBarcodeService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/GetBarcodeData", ReplyAction="http://tempuri.org/IBarcodeService/GetBarcodeDataResponse")]
        string GetBarcodeData(string barcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/GetBarcodeData", ReplyAction="http://tempuri.org/IBarcodeService/GetBarcodeDataResponse")]
        System.Threading.Tasks.Task<string> GetBarcodeDataAsync(string barcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/AddFood", ReplyAction="http://tempuri.org/IBarcodeService/AddFoodResponse")]
        bool AddFood(int kitchenId, string name, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/AddFood", ReplyAction="http://tempuri.org/IBarcodeService/AddFoodResponse")]
        System.Threading.Tasks.Task<bool> AddFoodAsync(int kitchenId, string name, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/EditItem", ReplyAction="http://tempuri.org/IBarcodeService/EditItemResponse")]
        bool EditItem(int id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/EditItem", ReplyAction="http://tempuri.org/IBarcodeService/EditItemResponse")]
        System.Threading.Tasks.Task<bool> EditItemAsync(int id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/RemoveItem", ReplyAction="http://tempuri.org/IBarcodeService/RemoveItemResponse")]
        bool RemoveItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/RemoveItem", ReplyAction="http://tempuri.org/IBarcodeService/RemoveItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/TestMethod", ReplyAction="http://tempuri.org/IBarcodeService/TestMethodResponse")]
        string TestMethod();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarcodeService/TestMethod", ReplyAction="http://tempuri.org/IBarcodeService/TestMethodResponse")]
        System.Threading.Tasks.Task<string> TestMethodAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IBarcodeServiceChannel : ServiceReference1.IBarcodeService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class BarcodeServiceClient : System.ServiceModel.ClientBase<ServiceReference1.IBarcodeService>, ServiceReference1.IBarcodeService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public BarcodeServiceClient() : 
                base(BarcodeServiceClient.GetDefaultBinding(), BarcodeServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IBarcodeService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BarcodeServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(BarcodeServiceClient.GetBindingForEndpoint(endpointConfiguration), BarcodeServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BarcodeServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(BarcodeServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BarcodeServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(BarcodeServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public BarcodeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string GetBarcodeData(string barcode)
        {
            return base.Channel.GetBarcodeData(barcode);
        }
        
        public System.Threading.Tasks.Task<string> GetBarcodeDataAsync(string barcode)
        {
            return base.Channel.GetBarcodeDataAsync(barcode);
        }
        
        public bool AddFood(int kitchenId, string name, int quantity)
        {
            return base.Channel.AddFood(kitchenId, name, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> AddFoodAsync(int kitchenId, string name, int quantity)
        {
            return base.Channel.AddFoodAsync(kitchenId, name, quantity);
        }
        
        public bool EditItem(int id, int quantity)
        {
            return base.Channel.EditItem(id, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> EditItemAsync(int id, int quantity)
        {
            return base.Channel.EditItemAsync(id, quantity);
        }
        
        public bool RemoveItem(int id)
        {
            return base.Channel.RemoveItem(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveItemAsync(int id)
        {
            return base.Channel.RemoveItemAsync(id);
        }
        
        public string TestMethod()
        {
            return base.Channel.TestMethod();
        }
        
        public System.Threading.Tasks.Task<string> TestMethodAsync()
        {
            return base.Channel.TestMethodAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBarcodeService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IBarcodeService))
            {
                return new System.ServiceModel.EndpointAddress("http://142.55.32.86:50241/BarcodeService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return BarcodeServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IBarcodeService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return BarcodeServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IBarcodeService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IBarcodeService,
        }
    }
}
