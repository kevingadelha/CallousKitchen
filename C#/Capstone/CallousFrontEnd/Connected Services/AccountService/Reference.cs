//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccountService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AccountService.IAccountService")]
    public interface IAccountService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccountWithEmail", ReplyAction="http://tempuri.org/IAccountService/CreateAccountWithEmailResponse")]
        int CreateAccountWithEmail(string userName, string pass, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccountWithEmail", ReplyAction="http://tempuri.org/IAccountService/CreateAccountWithEmailResponse")]
        System.Threading.Tasks.Task<int> CreateAccountWithEmailAsync(string userName, string pass, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        int CreateAccount(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/CreateAccount", ReplyAction="http://tempuri.org/IAccountService/CreateAccountResponse")]
        System.Threading.Tasks.Task<int> CreateAccountAsync(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LoginAccount", ReplyAction="http://tempuri.org/IAccountService/LoginAccountResponse")]
        int LoginAccount(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/LoginAccount", ReplyAction="http://tempuri.org/IAccountService/LoginAccountResponse")]
        System.Threading.Tasks.Task<int> LoginAccountAsync(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddKitchen", ReplyAction="http://tempuri.org/IAccountService/AddKitchenResponse")]
        int AddKitchen(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddKitchen", ReplyAction="http://tempuri.org/IAccountService/AddKitchenResponse")]
        System.Threading.Tasks.Task<int> AddKitchenAsync(int userId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetKitchens", ReplyAction="http://tempuri.org/IAccountService/GetKitchensResponse")]
        Capstone.Classes.SerializableKitchen[] GetKitchens(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetKitchens", ReplyAction="http://tempuri.org/IAccountService/GetKitchensResponse")]
        System.Threading.Tasks.Task<Capstone.Classes.SerializableKitchen[]> GetKitchensAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetInventory", ReplyAction="http://tempuri.org/IAccountService/GetInventoryResponse")]
        Capstone.Classes.SerializableFood[] GetInventory(int kitchenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetInventory", ReplyAction="http://tempuri.org/IAccountService/GetInventoryResponse")]
        System.Threading.Tasks.Task<Capstone.Classes.SerializableFood[]> GetInventoryAsync(int kitchenId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetBarcodeData", ReplyAction="http://tempuri.org/IAccountService/GetBarcodeDataResponse")]
        string GetBarcodeData(string barcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/GetBarcodeData", ReplyAction="http://tempuri.org/IAccountService/GetBarcodeDataResponse")]
        System.Threading.Tasks.Task<string> GetBarcodeDataAsync(string barcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddFood", ReplyAction="http://tempuri.org/IAccountService/AddFoodResponse")]
        bool AddFood(int kitchenId, string name, int quantity, System.Nullable<System.DateTime> expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/AddFood", ReplyAction="http://tempuri.org/IAccountService/AddFoodResponse")]
        System.Threading.Tasks.Task<bool> AddFoodAsync(int kitchenId, string name, int quantity, System.Nullable<System.DateTime> expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/EatFood", ReplyAction="http://tempuri.org/IAccountService/EatFoodResponse")]
        bool EatFood(int id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/EatFood", ReplyAction="http://tempuri.org/IAccountService/EatFoodResponse")]
        System.Threading.Tasks.Task<bool> EatFoodAsync(int id, int quantity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/EditFood", ReplyAction="http://tempuri.org/IAccountService/EditFoodResponse")]
        bool EditFood(int id, string name, int quantity, System.Nullable<System.DateTime> expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/EditFood", ReplyAction="http://tempuri.org/IAccountService/EditFoodResponse")]
        System.Threading.Tasks.Task<bool> EditFoodAsync(int id, string name, int quantity, System.Nullable<System.DateTime> expiryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/RemoveItem", ReplyAction="http://tempuri.org/IAccountService/RemoveItemResponse")]
        bool RemoveItem(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/RemoveItem", ReplyAction="http://tempuri.org/IAccountService/RemoveItemResponse")]
        System.Threading.Tasks.Task<bool> RemoveItemAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Test", ReplyAction="http://tempuri.org/IAccountService/TestResponse")]
        Capstone.Classes.SerializableUser[] Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccountService/Test", ReplyAction="http://tempuri.org/IAccountService/TestResponse")]
        System.Threading.Tasks.Task<Capstone.Classes.SerializableUser[]> TestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IAccountServiceChannel : AccountService.IAccountService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AccountServiceClient : System.ServiceModel.ClientBase<AccountService.IAccountService>, AccountService.IAccountService
    {
        
        public AccountServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public int CreateAccountWithEmail(string userName, string pass, string email)
        {
            return base.Channel.CreateAccountWithEmail(userName, pass, email);
        }
        
        public System.Threading.Tasks.Task<int> CreateAccountWithEmailAsync(string userName, string pass, string email)
        {
            return base.Channel.CreateAccountWithEmailAsync(userName, pass, email);
        }
        
        public int CreateAccount(string userName, string pass)
        {
            return base.Channel.CreateAccount(userName, pass);
        }
        
        public System.Threading.Tasks.Task<int> CreateAccountAsync(string userName, string pass)
        {
            return base.Channel.CreateAccountAsync(userName, pass);
        }
        
        public int LoginAccount(string userName, string pass)
        {
            return base.Channel.LoginAccount(userName, pass);
        }
        
        public System.Threading.Tasks.Task<int> LoginAccountAsync(string userName, string pass)
        {
            return base.Channel.LoginAccountAsync(userName, pass);
        }
        
        public int AddKitchen(int userId, string name)
        {
            return base.Channel.AddKitchen(userId, name);
        }
        
        public System.Threading.Tasks.Task<int> AddKitchenAsync(int userId, string name)
        {
            return base.Channel.AddKitchenAsync(userId, name);
        }
        
        public Capstone.Classes.SerializableKitchen[] GetKitchens(int userId)
        {
            return base.Channel.GetKitchens(userId);
        }
        
        public System.Threading.Tasks.Task<Capstone.Classes.SerializableKitchen[]> GetKitchensAsync(int userId)
        {
            return base.Channel.GetKitchensAsync(userId);
        }
        
        public Capstone.Classes.SerializableFood[] GetInventory(int kitchenId)
        {
            return base.Channel.GetInventory(kitchenId);
        }
        
        public System.Threading.Tasks.Task<Capstone.Classes.SerializableFood[]> GetInventoryAsync(int kitchenId)
        {
            return base.Channel.GetInventoryAsync(kitchenId);
        }
        
        public string GetBarcodeData(string barcode)
        {
            return base.Channel.GetBarcodeData(barcode);
        }
        
        public System.Threading.Tasks.Task<string> GetBarcodeDataAsync(string barcode)
        {
            return base.Channel.GetBarcodeDataAsync(barcode);
        }
        
        public bool AddFood(int kitchenId, string name, int quantity, System.Nullable<System.DateTime> expiryDate)
        {
            return base.Channel.AddFood(kitchenId, name, quantity, expiryDate);
        }
        
        public System.Threading.Tasks.Task<bool> AddFoodAsync(int kitchenId, string name, int quantity, System.Nullable<System.DateTime> expiryDate)
        {
            return base.Channel.AddFoodAsync(kitchenId, name, quantity, expiryDate);
        }
        
        public bool EatFood(int id, int quantity)
        {
            return base.Channel.EatFood(id, quantity);
        }
        
        public System.Threading.Tasks.Task<bool> EatFoodAsync(int id, int quantity)
        {
            return base.Channel.EatFoodAsync(id, quantity);
        }
        
        public bool EditFood(int id, string name, int quantity, System.Nullable<System.DateTime> expiryDate)
        {
            return base.Channel.EditFood(id, name, quantity, expiryDate);
        }
        
        public System.Threading.Tasks.Task<bool> EditFoodAsync(int id, string name, int quantity, System.Nullable<System.DateTime> expiryDate)
        {
            return base.Channel.EditFoodAsync(id, name, quantity, expiryDate);
        }
        
        public bool RemoveItem(int id)
        {
            return base.Channel.RemoveItem(id);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveItemAsync(int id)
        {
            return base.Channel.RemoveItemAsync(id);
        }
        
        public Capstone.Classes.SerializableUser[] Test()
        {
            return base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task<Capstone.Classes.SerializableUser[]> TestAsync()
        {
            return base.Channel.TestAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
    }
}
